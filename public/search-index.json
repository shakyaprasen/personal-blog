[{"slug":"5-crucial-things-I-do","category":"blog","title":"5 crucial things that I do before deploying my code","description":"This is a blog post on five things I do before deploying my code as a developer.","tags":["programming habits","productivity","steps"],"body":"\nOn my tech journey, I have tried to learn everything I can. Though my journey has not been too long, I have developed some habits - some subconsciously, some deliberately, some good, some let's say… not so good. Not only me, but I have observed this to be true of my peers and friends as well. Thinking about this led me to write a short blog about one of the many habits that I have delivered on my journey to become a developer.\n\nFirst things first, every developer has something to do before deploying their code. So, here I am writing about the 5 things I do before deploying my code.\n\n*Here is the tldr:*\n\n*The 5 steps I follow before deploying any code:*\n\n- *Check if the finished code fulfills the requirements/user story*\n- *Compare the changes to the code*\n- *Test the functionality on local/ staging server*\n- *Make sure all the code review comments are addressed*\n- *Make sure the automated tests have passed*\n\n\n## Check if the finished code fulfills the requirements/user story\nThe first thing that I always do before even thinking about committing and pushing my code is making sure my code works as intended. Even before testing edge cases, I make sure that my code fulfills the users requirements or user story.\n\n## Compare the changes to the code\nAfter the first step, I compare the changes to every file that I have made. This step helps me spot any errors like typos or missed console logs as well as re-evaluate any logic/ statements - so that I can make it cleaner/ simpler.\n\n## Test the functionality on local/ staging server\nImmediately after rechecking, I push my code to the cloud and test the functionality on the staging server to check if any thing might be broken on non-local environment.\n\n## Make sure all the code review comments are addressed\nMeanwhile, in between steps 2 and 3, I always keep the comments in the code review in mind and address them. Sometimes, I learn new things and ways to better my code, other times I find things that i have missed.\n\n## Make sure the automated tests have passed\nFinally, before deploying-merging I check to see if the CI tests like those of Code Climate have passed. These CI tests make sure that the code adheres to the standards of the project.\n\nSo, these are the sort of the general checklists that I follow before deploying my code. Different people might have different checklists or things that they do and these things might differ based on the tech stack or between organizations or even between individuals.\n\n\n"},{"slug":"create-composable-components","category":"blog","title":"Create composable components","description":"A straightforward way to improve your frontend components and make them reactive.","tags":["frontend","components","vue","react"],"body":"\n## Background\n\nI started my software journey from the frontend. There has been a lot of struggles, learnings and hardships\nin this journey. Even though I hear most people say frontend is easy and backend is harder, I struggled quite\na bit on frontend when starting out. At the time I would search for articles, blogs and tutorials to make my life\nas a frontend developer easier. This is one such post which would have helped me and I hope will help someone else\nat a similar place in their career.  \n\nWith the background out of the way, let's start with 'why the *\"Composable components\"* topic?'. I see a lot of junior\ndevelopers starting out in full-stack development and walk into similar problems on the frontend side. So, this is an\narticle which aims to help those developers look at frontend development from a different perspective.\n\n## The Problem\n\nOne of the things that I see repeated during code reviews and pair programming sessions with junior developers on the frontend\nside is use of what I like to call *if/else components*.  \n\nLet me start off with an example,  \n\n  ```html\n    //SimpleButtonComponent.vue\n      <button type=\"button\" @click=\"handleClick\">\n        Click me!\n        <SomeIcon />\n      </button>\n  ```\n\nAs you can see, it is a simple button component with a text and an icon after. Seems like a simple enough button. Now\nlet's say your Project Manager gives you a new requirement: instead of SomeIcon use AnotherIcon components \nin a couple of places. To solve this requirement I have seen a lot of junior devs do something like :\n\n\n  ```html\n    //SimpleButtonComponent.vue\n      <button type=\"button\" @click=\"handleClick\">\n        Click me!\n        {{ isSomeIcon ? <SomeIcon /> : <AnotherIcon /> }}\n      </button>\n  ```\nHere isSomeIcon is a prop based on which either SomeIcon or AnotherIcon is used. Now the name *if/else components* might make\nmore sense. While inherently there is nothing wrong with this components or even this type of solution to the problem, when an\nadditional requirement like a third icon or move the icon before the text pops up then it becomes a problem.\nI have seen this solution compound into components with many if/else or switch statements all over the place.  \n\nSome additional problems which can prop up (no pun intended) due to this:\n  - Hard to use components\n  - Increased code complexity from increased number of conditions\n  - Massive number of props\n  - Prop drilling\n\n## The solution\n\nAn elegant solution to this problem is a technique called *\"Component Composition\"*. Component composition simply means creating\nyour components with the help of other components. Another good way of thinking about component composition is thinking that the\ncomponent and parts inside of the components as blocks(or Lego blocks). Like with Lego blocks, one block can be added to many types\nof other Lego blocks and create entirely different kind of output.  \n\n## Component Composition in Action\n\nLet's demonstrate composition with a diagram\n\n<img src=\"https://i.imgur.com/5MudrAZ.png\" width=\"300\" alt=\"Simple dropdown\">\n\nWe can see a simple dropdown component with an icon on the right in the image above. Let's say that we are to create this component in \na composable way. How would I go about it? The way I would start creating the component is by visualizing the component it into sensible blocks.\n\n<img src=\"https://i.imgur.com/B9fNKEo.png\" width=\"300\" alt=\"Diagram showing component composition\">\n\n\nI would have four blocks of smaller component to create the whole dropdown component. \nAdditionally, I would add *slots* in Vue and *render props* in React to these four components so that any one of them can be easily replaced with \na different component. \n*In Vue, [slot](https://vuejs.org/guide/components/slots.html#slots) and in \nReact, [render props](https://react.dev/reference/react/Children#calling-a-render-prop-to-customize-rendering) can be used to \nachieve component composition.*\nThe functionality however would be handled by the encompassing dropdown component as a whole. for example:\n\n  ```html\n    //DropdownComponent.vue\n    <div>\n      <slot name=\"selected\">\n        <span>{{ selectedValue }}</span>\n      </slot>\n      <slot name=\"icon\">\n        <DownIcon />\n      </slot>\n    </div>\n    <slot name=\"list-wrapper\">\n      <ItemListWrapper >\n        <ItemList v-for=\"item in items\" >\n          <slot name=\"list-item\">\n            <button @click=\"() => selectItem(item)\">{{ item }}</button>\n          </slot>\n        </ItemList>\n      </ItemListWrapper>\n    </slot>\n  ```\n\nAs you can see adding four slots in the Vue components has made it so that the parent using the DropdownComponent can use it as is (with\nthe defaults used or can override any or all of the slots with any other component). This gives the parent freedom to modify the UI without\nhaving to add additional props or even changing the Dropdown component.\n\nIn addition to slots and render props as a simple placeholder for components, they can also be used to create Headless components i.e. \ncomponents which do not provide any UI but only act as a wrapper which provide functionality. One such instance that I have used headless component \nin the past is a lazy loader component which lazy loads any media like images, audio, etc only after the component gets close to the viewport. \nThis lazy loader component did not have any UI but only had the functionality of loading the content after it entered the viewport.\n\n\n[Scoped slots](https://vuejs.org/guide/components/slots.html#scoped-slots) allow you to pass data from the child to the parent for additional\nhelp in customization for Vue while passing a functin to a render prop which accepts arguments is a way to do the same in React.\n\n## Further Reading\n\n  - [Patterns.dev](https://www.patterns.dev/posts/render-props-pattern)  \n    A great dive into render props pattern and how to use it to compose components in React\n\n  - [BinarCode Article](https://medium.com/binarcode/understanding-scoped-slots-in-vue-js-db5315a42391)  \n    A clear explanation of scoped slots in Vue and how it can be used to create a composable and flexible table. This is close to something\n    that I myself have implemented for creating a flexible table from scratch in Vue.\n\n\n"},{"slug":"implement-push-notification-using-Amazon-SNS","category":"blog","title":"Implement push notification using Amazon's SNS","description":"How I implemented push notification system using Amazon's SNS","tags":["how to","amazon sns","push notification","aws","mobile development","ios","android"],"body":"Instead of the normal technical article, I want to structure this as a short \"story\" - my story - of how I struggled and eventually succeeded in using Simple Notification Service(SNS) to use for push notification. \n\nWhile trying to use SNS to easily send push notifications, I found it difficult to find good resources detailing the use of SNS + Firebase Cloud Messaging (hence onwards referred to as FCM) on the big ol' internet. I'm writing this story so that lost souls like me will have a relatively easier time implementing it.\n\nBut, before I bombard you with the technical mumbo-jumbo, let's start with the question \"Why use SNS for push notification?\". If you know about push notifications or have implemented push notifications before, you might be thinking \"Why not just use FCM directly\", instead of using an additional layer on top FCM. And to that I say, \"huh, good question\". \n\nMy team decided early on, before starting any work on push notification, to try and minimize external dependencies. Adding to the fact that all of the infrastructure was hosted on AWS and we were already using other AWS services such as S3, SES, etc. it was a conscious choice made to better the developer experience and easy onboarding of other developers to the feature.\n\nSo, I started my journey to implement push notification in the application I was working on (Side note: the application and the domain do not have any significant impact to the story so I'll leave it vague). I only had a basic idea of what push notification even was. So, off I went googling \"What is push notification\" and \"How to implement push notification in SNS\".\n\nThis was the first mistake I made, specifically searching \"How to implement push notification in SNS\". Skimming through the result I found myself thinking \"Sweet, this is easy SNS can directly send a push notification to the mobile phone, this should be easy\". I follow a few steps that I found in the docs and reach my first hurdle. While creating a platform application endpoint, it asks for the push notification platform. \n\nI'm thinking I made a mistake as I don't see this being mentioned in other articles as well. That's when I find out SNS in isolation cannot send push notifications by itself but another service like Apple Push Notification (APN) Service or FCM sends the push to the devices.\n\nWith this knowledge in hand, I continue to follow the steps detailed in the AWS SNS documentation. I first setup a test Firebase account and add my mobile app to the firebase project, following the instructions of the google documentation. I then use the server key from the cloud messaging tab to the create platform application screen in amazon SNS.\n\n![FCM setup](https://imgur.com/lkEuesl.png)\n\nWell that's all well and done, now all there's left is to add the device token (Unique device id to identify each device) and send the push notification.\n\n![Push tests](https://imgur.com/Vlh9TQ5.png)\n\nNow, the next thing left to do was just send a message using the AWS sdk to SNS and the SNS should in theory forward it to Google Cloud Messaging (GCM), and it should handle the rest.\n\nWhile sending the message to GCM, AWS documentation gives lots of options for message formatting for each type of platform(iOS and Android). I had to find out the hard way that since we are sending the push notification first to GCM and only then to the user's device, I needed to send the message to GCM specifically without regard to the platform. \n\nThe final message needed to be JSON stringified before sending and looked something like this:\n\n```javascript\n    const gcm = {\n      notification: {\n        body: 'Hello this is a test message description.',\n        title: 'You got a push notification!',\n      },\n    };\n    const payload = {\n      default: 'This is a default message.',\n      GCM: JSON.stringify(gcm),\n    };\n\n    const stringifiedPayload = JSON.stringify(payload);\n```\n\nI was almost done with the push notification well, not quite. Installing the application to an Android phone and testing the feature through the new notification option under cloud messaging in Firebase console and seemed to work. But, making it work on iOS devices was a whole another story for next time.\n\n\n\n"},{"slug":"observability-in-distributed-applications","category":"blog","title":"Observability in distributed systems","description":"A starting guide to understand observability in distributed systems.","tags":["begineer","distributed-systems","logs","metrics","traces"],"body":" <br> \n <br> \n\n## Background\n\nA basic way to debug anything or know what is happening in your application is Logs. Logs show a record of application events at a particular time. I used to extensively rely on logging to debug as well as observe the events in any applications I develop. \nNow as I am working in a complex and distributed application, logs don't just seem to be enough to know what is happening inside of my application. Logs from a particular application just don't have the information necessary to properly get a full sense of the events inside the application. Things like request origin, time-to-execution, and dependency among the applications are some information that cannot be properly conveyed by logs. This has changed my perspective on the importance of Observability in a distributed application.\n\nBefore proceeding further into Observability, we will need to define some basic things:\n\n### Distributed systems\n\nIn simple words, a distributed system is a system where the components are located in logically or physically different computing resources which communicate through a network. As business requirements have become complex and a computer program is expected to do more and more, distributed systems have become popular as a way of addressing these requirements. If you are working to solve a complex problem for scale, more often than not you are working on a distributed system.\n\n### Observability\n\nObservability is the ability to gain an understanding of the internal state and behavior from only its external outputs.  It helps teams from identifying problems to finding the root cause without any additional coding or testing.\nIt allows us to explore and monitor system components, interactions, and dependencies even in a highly distributed and dynamic environment. A sufficiently complex system requires a holistic approach such as observability to know what is happening. We can effectively troubleshoot issues, detect anomalies, optimize performance, and make informed decisions by embracing observability.\n\n## Components in an observable system\n\nThere are three primary components in an observable system commonly known as the \"Three Pillars of Observability\":\n\n- Logs  \n\tLogs are as mentioned at the start of this post, a record of events that have transpired inside of an application. They provide a glimpse into the system at a particular time. It is primarily used for debugging purposes.\n\t\n- Metrics  \n\tMetrics are quantitative measurements that provide insight into the performance, and health of a system over time. Unlike logs, metrics provide aggregated data which offers a high-level view of a system's performance. Some common metrics are CPU capacity, memory usage, request/response latency, etc.\n\t\n- Traces  \n\tTraces are the recorded life-cycle of a request or a transaction as it moves through the various components in a distributed system. We can also term it as an 'end-to-end' journey for a request or a transaction. Traces capture the interactions and timings between the different services when they perform their specific task for a request. This can help visualize the relation/dependencies between different parts of a distributed system.\n\n## Benefits of Observability\n\nSo after talking about what observability is, I would like to point out some use and advantages of observability:\n\n- Find the dependencies and relations between different parts of a system.\n- Map out the path for different events/requests.\n- Find issues that you don't know exist.\n- Catch issues and resolve them without the complexity of a distributed system\n- Enable self-healing infrastructure\n\n## Tools and technologies for Observability\n\nSome tools that I have used and are suitable for different pillars of observability are:\n\n- Log aggregation and management:\n\t- EFK/ELK - Elasticsearch, FluentBit/FluentD or Logstash and Kibana\n\t- Native Logging for Cloud Service Providers - AWS Cloudwatch, GCP logging, etc.\n\t\n-  Metrics:\n\t- Prometheus\n\t- Grafana\n\t- InfluxDB\n\n- Traces:\n\t- Jaeger\n\t- Zipkin\n\t- Opentelemetry\n\n*Note: There are third-party observability platforms that provide support for all three pillars of observability. Using these platforms might be sensible if you do not want to manage them individually. Some of these platforms in no particular order are: Datadog, Logz.io, Honeycomb, etc.*\n\n## Further Reading:\n\n[IBM writeup on observability](https://www.ibm.com/topics/Observability)  \n[New Relic - What is Observability?](https://newrelic.com/blog/best-practices/what-is-observability)\n"},{"slug":"run-mysql-on-kubernetes","category":"blog","title":"Run MySQL database on kubernetes","description":"A simple how to on running an instance of MySQL database on a Kubernetes cluster","tags":["how to","dev ops","mysql","kuberentes"],"body":"\n## Background  \n\nA couple of months back, I had to migrate a MySQL server on AWS Relational \nDatabase Service(RDS) to our Kubernetes cluster on AWS Elastic Kubernetes \nService(EKS).\nThis post serves as a how to guide as well as a reminder to myself in case I \nhave do something like this again.\n\n## Mysql Deployment\n\nFirst things first, for running our own MySQL instance we need to create a \ndeployment. A deployment in Kubernetes is just a configuration to express the\ndesired state for a Pod or ReplicaSet.\n\nSo, our deployment config *mysql/deployment.yaml* should look something like\nthis:\n\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql-database\nspec:\n  selector:\n    matchLabels:\n      app: mysql-database\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: mysql-database\n    spec:\n      containers:\n        - image: mysql:8.0\n          name: mysql-database\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              value: ${MYSQL_ROOT_PASSWORD}\n            - name: MYSQL_USER\n              value: ${MYSQL_USERNAME}\n            - name: MYSQL_PASSWORD\n              value: ${MYSQL_PASSWORD}\n            - name: MYSQL_DATABASE\n              value: my_database\n          ports:\n            - containerPort: 3306\n              name: mysql-database\n```\n\nThe above config creates a deployment with mysql version 8.0 image from \nthe official Dockerhub. The variables *${MYSQL_ROOT_PASSWORD}, \n${MYSQL_PASSWORD}, ${MYSQL_USERNAME}* should be populated preferrably using \nkubernetes secrets.\n\nAfter changing the mentioned variables, you can run *kubectl apply -f \n./mysql/deployment.yaml* to run the mysql deployment.\n\n\n## Mysql Service\n\nSo, the mysql deployment is up and running, now how do our pods and services \ninside the Kubernetes cluster connect to the running MySQL server? The answer is easy,\nKubernetes Service. A Kuberentes Service exposes an application, in our case \nthe MySQL server to othe applications.\n\nLet's write the Service config *mysql/service.yaml*:\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-database\nspec:\n  ports:\n    - port: 3306\n  selector:\n    app: mysql-database\n  clusterIP: None\n\n```\n\nRun *kubectl apply -f .mysql/service.yaml* to run the service.\n\nThis exposes the MySQL server so that other applications/services can connect \nusing the 3306 port on *mysql-database* service name.\n\n\n### Persistent Volume\n\nThe last thing that we missed is to configure the MySQL server so that even if\nthe server restarts, our data does not dissapear. In our current configuration,\nwe have not specified the place to store our data in case of restarts. \nPersistent Volume is a way in Kuberentes to store data in a persistent way. \nIt provides an API to store data independent of the type of data storage \ni.e. Block Storage, NFS, etc and independent of the lifecycle of any pod that\nuses it.\n\nIn short, we will be utilizing Persistent Volume(PV) and \nPersistent Volume Claims(PVC) features of Kuberentes to store data in AWS\nElastic Block Storage. We will also be utilizing Dynamic Volume Provisioning to\nbe able to request dynamically provisioned storage using Storage Class. This\nallows storage volumes to be created on demand.\n\nSo, let's first create our storage class to *storage-class.yaml* which states \nwhat type of storage we will be using.\n\n```yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: standard\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  type: gp2\nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - debug\nvolumeBindingMode: Immediate\n```\n\nRun *kubectl apply -f ./storage-class.yaml* to create a storage class with the\nabove configuration.\n\n__Note: If you are running this config in your local kuberentes cluster like on a\nMinikube or Docker Desktop, you will have to change the provisioner to \n*k8s.io/minikube-hostpath* or *docker.io/hostpath* depending on where the cluster\nis hosted in your local system.__\n\n```yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: standard\nprovisioner: docker.io/hostpath \nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - debug\nvolumeBindingMode: Immediate\n```\n\nThen we will be creating only a Persistent Volume Claim using the name of the\nStorage Class previously defined i.e. *standard*. Save this configuration to\n*mysql/persistent-volume-claim.yaml*.\n\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-pv-claim-db\nspec:\n  storageClassName: standard\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n\n```\n\nRun the command *kubectl apply -f ./mysql/persistent-volume-claim.yaml* to \ncreate a persistent volume and persistent volume claim.\n\n\n## Putting it all together\n\nFinally, we will mount the volume that we have just claimed to our mysql server.\nSo, the final deployment file will be:\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql-database\nspec:\n  selector:\n    matchLabels:\n      app: mysql-database\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: mysql-database\n    spec:\n      containers:\n        - image: mysql:8.0\n          name: mysql-database\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              value: ${MYSQL_PASSWORD}\n            - name: MYSQL_USER\n              value: ${MYSQL_USERNAME}\n            - name: MYSQL_PASSWORD\n              value: ${MYSQL_PASSWORD}\n            - name: MYSQL_DATABASE\n              value: my_database\n          ports:\n            - containerPort: 3306\n              name: mysql-database\n          volumeMounts:\n            - name: mysql-persistent-storage-ebs\n              mountPath: /var/lib/mysql\n      volumes:\n        - name: mysql-persistent-storage-ebs\n          persistentVolumeClaim:\n            claimName: mysql-pv-claim-db\n\n```\n\nRunning the command *kubectl apply -f ./mysql/deployment.yaml* should update \nthe the previous MySQL server deployment with the new one which uses the newly\nprovisioned persistent volume.\n\nAny data saved in the mysql server will now be persistent across server \nrestarts.\n<br/>\n<br/>\n\n"},{"slug":"tech-interviews-are-broken","category":"blog","title":"Tech interviews are broken","description":"This blog post describes the problems with technical interviews and their possible solutions","tags":["programming","interviews"],"body":"# Tech interviews are broken. \n\nMost of us in the tech industry might have heard the phrase \"Tech interviews are broken\". What does it actually mean? Is it really broken? How is it broken? and What can be done to fix it?\nThese are some of the questions that I hope to answer in this blog post.\n\nIf you are involved in technical hiring/recruitment in your company, this post might contain something for you.\n\n## Some background\n\nI have been working in the tech industry for close to 6 years now. Throughout this time I have worked full-time in 4 companies, freelanced for a couple, and been involved in tech interviews on both the interviewer and the interviewee side, totaling close to 40-50 interviews.\nI have given technical interviews for international companies, and have taken interviews of interviewees from different countries as well. After being involved in all these interviews, I too stand by the statement \"Tech interviews are broken\".\n\n## Why?\n\nAfter talking with some colleagues and engineers involved in these interviews, following things stood out to me about tech interviews: \n\n### 1. Questions/tasks unrelated to the actual job  \nMost of what is asked within the interview does not have any direct relation with the job that is being interviewed for. I have seen people ask and being asked to do system design for a Software Engineer level position(where system design is not a requirement for the role), questions about the latest JS framework features like when the codebase they will be working on is more than a couple of major versions old, questions about microservices and their challenges when the job is primarily concerned with a monolith service. This shows a divide between the questions asked, the topics discussed and the actually job. \n\n### 2. Proper expectations not set  \nSetting proper expectations for the interviewee should be the primary goal of the interviewer and/or the recruiter. I have been in interviews where I did not have any clue as to what type of interview it would be.\nWould it be an interview where I had to whiteboard a solution to a question? Would it involve systems design? Was it just an interview related to the technical requirements mentioned in the job description? or was it a mixture of two or more? These were the questions that I would ask the recruiter when the interview was scheduled. More often than not, I would not get a straightforward answer. I have also played the part of the interviewer in interviews where after the interview started, the expectation from the interviewee was totally different than what the interview was supposed to be.\n\n### 3. One-sided Q&A  \nOften interviews are the interviewer asking the questions and the interviewee answering/trying to answer them. The inherent power dynamics in this setting is something which can affect the interviewee. It isn't a suitable environment where the interviewee can best show their abilities and skills so,\nn addition to other responsibilities for the interviewer, easing the interviewee into this dynamic should also be one of them. I have forgotten things that I knew and fumbled quite a bit with answers to simple questions when being asked rapid-fire questions while being nervous. \n\n## What to do then?\n\nWhat can be done to tackle these issues in your organization? Gradual implementation of the suggestions that will follow will undoubtedly improve the interview process in your organization.\n\n### 1. Set baseline expectations of what the interview will entail  \nStart by setting expectations for the interview by the interviewer or recruiter even before the interview process begins. A good example of this would be setting the expectations for the interviewee regarding the type of interview it is; If it will be a full-on coding challenge, generic questions about a certain technology, system design-related interview, database-related questions, etc.\n\n### 2. Ease the candidate into the interview  \nAlways start by introducing yourself and getting to know the interviewee first. Getting to know each other and talking for a while will increase familiarity and comfort. Then, it might be a good idea to dive into the background or previous experiences to know more about the interviewee and what type of work they have experience with. Continue with questions related to their previous work and then tie those up with questions related to the current job being interviewed for. \n(If possible) Another way to increase comfort in the interview is by asking at the beginning of the interview which language they would prefer the interview be in. E.g. I always ask if the interviewee would prefer the interview to be in Nepali, English, or a mix of both. You can also ask for their preference if applicable.\n\n### 3. Avoid asking definitions and questions from a list  \nAsking for answers from a standard list of questions would just be wasting both the interviewer's and interviewee's time. Doing this doesn't take into account things like their past work experience or their creativity in solving problems. Questions that relate to the job, as well as their past work, will shine a light on how much contribution they made and the knowledge they gained from it. Hypotheticals like additional constraints to a decision that they made previously with different sets of constraints can test their understanding, adaptability and creativity.\n\n### 5. Provide guidance when necessary  \nAs I have mentioned before, an interview is not supposed to be a Q&A session. I have found interviews where the interviewer and the interviewee collaboratively reach a solution to be useful for gauging the capability of a person. The level of guidance required for the candidate to reach a satisfactory answer can be a major part of the rubric for scoring the interview.\n\n### 6. Make it a learning experience  \nAny interview even when the candidate is out of their depth or is not suitable for the job can be useful for both the parties involved if they learn something out of it. Learning from the interview is not just something for the interviewee but also for the interviewer. I have at many times learned new concepts and technologies while conducting interviews because the interviewee had worked on a technology I haven't worked on before.\n\n\n## Final words\n\nEven if you cannot implement all the above suggestions when you conduct interviews, one thing I would greatly appreciate if everyone tried to do is: Make interviews suck less. Our jobs are stressful as they are the least we can do is make interviews suck less for all the people involved.\n\n\nSome great resources for better tech interviews:\n\n[This Interview path for T3 tools](https://t3-tools.notion.site/Technical-Interview-Dan-Abramov-9aa6d8e9292e4bd1ae67b44aeeaabf88)  \n[Mock interview by freeCodeCamp](https://youtu.be/1qw5ITr3k9E)\n"},{"slug":"unleash-recursion-in-frontend-components","category":"blog","title":"Unleash the Power of Recursion in Frontend Component Creation","description":"This blog post explains the use of recursive components in frontend","tags":["frontend","components","recursion"],"body":"\n# Unleash the Power of Recursion in Frontend Component Creation\n\n## The artistry of component creation\n\n I think component creation in frontend programming is something akin to art rather than science. Given a problem, the types of components that will be created will be proportional to the number of frontend engineers who try to solve it. How a component is structured, the types of props which are accepted, the breakdown of the number of UI elements to different components, the events which the component will emit, whether the component state will be handled by itself or will it offload some or all state management to the component implementing its interface will all differ. \n Some might make their components easily composable, some might make their components non-extensible. The artistry in frontend component creation cannot be denied. \n\n\n## Background\n\nA couple of weeks back, I stumbled upon a particular problem in the realm of Frontend development: \"How can I make a Navigation bar with an arbitrary level of depth?\". \n\nThe nested-route structure would look something like (*depth arbitrary*):\n\n```bash\n├── Route 1\n│   ├── Subroute 1\n│   │   └── Nested Subroute 1\n│   ├── Subroute 2\n│   ├── SubRoute 3\n│   │   └── Nested subroute 1\n│   │       ├── Super nested subroute 1\n│   │       └── Super nested subroute 1\n│   │           └──....\n│   └── Subroute 4\n├── Route 2\n│   ├── Subroute 1\n│   ├── SubRoute 2\n│   └── Subroute 3\n│       └── Nested Subroute 1\n└── Route 3\n```\n\nI had the data structure for the routes in an array in JS which directly mapped to the above structure.\n\nAfter some thinking, the first naïve solution that came to my mind was to get/derive the maximum depth of nested routes and run a for loop on the number. After writing out it in pseudo-code, I came to the obvious conclusion that a branch of a nested route could be rendered in such a way, for other branches/sub-routes though it would be a headache if they had differing depths.\n\nSo going back to the drawing board, I had to create a component that would have a relatively simple interface but also be flexible enough to handle any level of depth. The solution I reached for this time was the dreaded solution; *at least by me*, Recursion. There was only one problem, I hadn't done any recursion work on the component side of things and was not aware of how to even get started.\n\n## Unraveling the magic\n\nYou might ask *\"How does recursion help create a nested navbar with arbitrary depth\"*. Let's think of the above problem in terms of components. In the structure previously mentioned, there are Routes inside which are clickable routes themselves and unclickable routes with subroutes. Subroutes with further nested routes are nothing else but the same components as the top-level routes and so on. \n\nSo, it seems there are 2 major cases:\n\n1. Routes -> Subroutes(without further nested routes)\n2. Routes -> Subroutes(with further nested routes)\n\nLooking at the second case, it seems that the subroute will be the top-level route component itself. All the cases for further nesting are then covered by the above two cases. So, we need to have a way for a component to use itself which is what recursion is.\n\nNow that we're done with figuring out what we have to do, we'll need to implement it. Modern frontend frameworks like Vue.js and React it's relatively simple you just call the component itself from within itself.\n\n```vue\n// RecursiveComponent.vue\n<template>\n  <RecursiveComponent />\n</template>\n```\n\n```jsx\nconst RecursiveComponent = () => ({\n  <div>\n    <RecursiveComponent />\n  </div>\n})\n```\n\n*Note: Do not use the above example. No terminal condition is specified so the component will recurse infinitely or till the browser terminates it.*\n\nLet's start with the html for a base route (this example is in vue, but is similar for other frameworks):\n\n```vue\n// NavList.vue\n<template>\n  <div v-for=\"(route, idx) in routes\" :key=\"idx\" v-bind=\"$attrs\">\n    <template v-if=\"route.type === 'route'\">\n      <button\n        type=\"button\"\n        role=\"link\"\n      >\n        {{ route.label }}\n      </button>\n    </template>\n  </div>\n</template>\n```\n\nThis will render all the base routes with the type \"route\" i.e. routes that have no subroutes (in our case only Route 3). Now we need to handle the case for base routes that have sub routes(i.e. Route 1 and Route 2 from the first diagram):\n\n```vue\n// NavList.vue\n    <template v-else>\n      <div\n      >\n        {{ route.label }}\n      </div>\n      <NavList\n        :routes=\"route.subRoute\"\n        :style=\"padding-left: 20px;\"\n      />\n    </template>\n```\n\nWe add an else condition for base routes with subroute which we'll want to be unclickable so we'll put the label inside a div tag. Now we will have to render the subroutes for this condition which are inside the \"subRoute\" key. Then, we add a NavList component which is the component itself passing the subroutes in the route key which will contain all the subroutes which may or may not have further nested subroutes (Subroute 1, 2, 3 4 and all their nested subroutes for Route 1). \n\nThis will render the component itself this time with the subroutes instead of routes. For Subroute 1 from Route 1, since it has subroutes, it will satisfy the else condition. Then again send its nested subroutes contained in its \"subRoute\" key to another instance of NavList. Since Nested Subroute 1 for Subroute 1 from Route 1 does not further have nested routes, it will then satisfy the if condition. The recursion then will exit after rendering a button and move onto Subroute 2 from Route 1. This will again satisfy the if condition and render a button and move on to the next Subroute and so on.\n\nEven though it is hard to grasp recursion at the start, once you have a grasp of it does get easier. \nSo, the final Navlist.vue Component is:\n\n```vue\n<template>\n  <div v-for=\"(route, idx) in routes\" :key=\"idx\" v-bind=\"$attrs\">\n    <template v-if=\"route.type === 'route'\">\n      <button\n        type=\"button\"\n        role=\"link\"\n      >\n        {{ route.label }}\n      </button>\n    </template>\n\t<template v-else>\n      <div\n      >\n        {{ route.label }}\n      </div>\n      <NavList\n        :routes=\"route.subRoute\"\n        :style=\"padding-left: 20px;\"\n      />\n    </template>\n  </div>\n</template>\n```\n\n## Best practices for recursion\n\nThere are some things to consider when doing anything related to recursion. If you miss any condition or don't think through iterations, the result might not be what you expect. As we all know it is very difficult to debug recursion code.  \n\nSome things to keep in mind to minimize headaches when working with recursion are:\n\n1. Clearly define component boundaries  \n\tRecursive components will need proper boundaries about what the component being recursed does and what can be done by the parent component. For the above example, the component only has the responsibility of rendering the Navigation items and labels.\n\t\n2. Proper termination conditions  \n\tTermination conditions or base cases also should be properly considered. If you miss a case for terminating the recursion then it will result in an error. So, I always suggest writing the termination condition first to be crystal clear on the base case.\n\n3. Implement with care and understanding  \n        You'll have bugs in your code so take your time implementing recursion and try to go through the loops in the recursion in your head or written somewhere.\n\n## Use case\n\nIn addition to the case mentioned above, there are some other use cases for using recursion in components:\n\n1. Tree-like structures(navigation menus, file explorers)\n2. Hierarchical data visualization\n\n\n"}]